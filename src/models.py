from typing import List, Optional, Set
from pydantic import BaseModel, Field

class Step(BaseModel):
    name: str
    output: str
    instruction: str
    inputs: List[str]
    system_prompt: Optional[str] = Field(None, alias='system-prompt') 

class ReasoningTask(BaseModel):
    purpose: str
    system_prompt: str = Field(..., alias='system-prompt')
    steps: List[Step]
    final_output: str = Field(..., alias='final-output')

    def calculate_minimum_inputs(self) -> List[str]:
        outputs_generated = set()  # To track all the outputs generated by previous steps
        minimum_inputs_required = set()  # To track inputs that are not generated as outputs

        for step in self.steps:
            # For each step, check if its inputs are in the outputs_generated list
            for input in step.inputs:
                if input not in outputs_generated:
                    minimum_inputs_required.add(input)

            # Add the current step's output to the outputs_generated list
            outputs_generated.add(step.output)

        return list(minimum_inputs_required)
    
    def validate_inputs(self, inputs: dict[str, any]):
        required_inputs = self.calculate_minimum_inputs()
        assert all([i in inputs for i in required_inputs]),f"Make sure all attributes required are present {required_inputs}"     
